// create a socket
0 `sysctl -w net.ipv4.tcp_timestamps=0`

+0 socket(..., SOCK_STREAM, IPPROTO_TCP) = 3
+0.000 fcntl(3, F_GETFL) = 0x2 (flags O_RDWR)
+0.000 fcntl(3, F_SETFL, O_RDWR|O_NONBLOCK) = 0

// Establish connection and verify that there was no error.
+0.0 connect(3, ..., ...) = -1 EINPROGRESS (Operation now in progress)
+0.0 > S 0:0(0) win 29200 <mss 1460,sackOK,nop,nop,nop,wscale 7,mp_capable a> sock(3)
+0.0 < S. 0:0(0) ack 1 win 5792 <mss 1460,sackOK,nop,nop,nop,wscale 7,mp_capable b> sock(3)
+0.0 > . 1:1(0) ack 1 <mp_capable a b, dss dack4=trunc_r64_hmac(b)+1> sock(3)
0.200 getsockopt(3, SOL_SOCKET, SO_ERROR, [0], [4]) = 0
0.200 fcntl(3, F_SETFL, O_RDWR) = 0   // set back to blocking

/* This here is a seamless fallback, because there is data without dss at the beginning */
+0 < P. 1:1001(1000) ack 1 win 450 <mp_fail dsn8=1>
+0 > . 1:1(0) ack 1001

+0 read(3,...,1000) = 1000

+0.1 close(3) = 0
+0 > F. 1:1(0) ack 1001
+0 < . 1001:1001(0) ack 2 win 4242
+0 < F. 1001:1001(0) ack 2 win 4242
+0 > . 2:2(0) ack 1002

+0 `sysctl -w net.ipv4.tcp_timestamps=1`
