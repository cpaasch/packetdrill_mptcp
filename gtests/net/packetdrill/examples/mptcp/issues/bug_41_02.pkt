// mptcp v0.88
// connect() function, connection initiated by the kernel

// create a socket
0.000 socket(..., SOCK_STREAM, IPPROTO_TCP) = 3
+0.000 fcntl(3, F_GETFL) = 0x2 (flags O_RDWR)
+0.000 fcntl(3, F_SETFL, O_RDWR|O_NONBLOCK) = 0

// Establish connection and verify that there was no error.
+0.0 connect(3, ..., ...) = -1 EINPROGRESS (Operation now in progress)
+0.0 > S 0:0(0) <mss 1460,sackOK,TS val 100 ecr 0,nop,wscale 7,mp_capable a> sock(3)
+0.0 < S. 0:0(0) ack 1 win 5792 <mss 1460,sackOK,nop,nop,nop,wscale 7,mp_capable b> sock(3)
+0.0 > . 1:1(0) ack 1 <mp_capable a b, dss dack4=trunc_r64_hmac(b)+1> sock(3) 
0.200 getsockopt(3, SOL_SOCKET, SO_ERROR, [0], [4]) = 0
0.200 fcntl(3, F_SETFL, O_RDWR) = 0   // set back to blocking

+0 write(3, ..., 1000) = 1000
+0 > P. 1:1001(1000) ack 1 <dss dack4 dsn4>
+0.1 < . 1:1(0) ack 1001 win 225 <dss dack4> sock(3)

// Send some data, to get an ack back with space available for an ADD_ADDR
+1 < P. 1:301(300) ack 1001 win 225 <dss dack4 dsn4>
// Now, here we do not expect an ADD_ADDR. But the kernel adds one
+0  > . 1001:1001(0) ack 301 <dss dack4>

