/* mptcp 0.88
 * Test handling of incoming ICMP packets.
 * This test tests all known ICMP packet types, and a few unknown
 * types.
 */

// Establish a connection.
0.000 socket(..., SOCK_STREAM, IPPROTO_TCP) = 3
+0 setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
+0 bind(3, ..., ...) = 0
+0 listen(3, 1) = 0

+0.1 < S 0:0(0) win 32792 <mss 1028,nop,wscale 7, mp_capable a>
+0 > S. 0:0(0) ack 1 <mss 1460,nop,wscale 7, mp_capable b>
+0.1 < . 1:1(0) ack 1 win 257 <mp_capable a b>
+0 accept(3, ..., ...) = 4

// Send 1 data segment.
+0 write(4, ..., 1000) = 1000
+0 > P. 1:1001(1000) ack 1 <...>

// We get lots of incoming ICMP messages.

// First the unreachable type and all its codes
+0.1 < icmp unreachable net_unreachable
+0.001 < icmp unreachable host_unreachable
+0.001 < icmp unreachable protocol_unreachable
+0.001 < icmp unreachable port_unreachable
+0.001 < icmp unreachable frag_needed mtu 1234
+0.001 < icmp unreachable source_route_failed
+0.001 < icmp unreachable net_unknown
+0.001 < icmp unreachable host_unknown
+0.001 < icmp unreachable source_host_isolated
+0.001 < icmp unreachable net_prohibited
+0.001 < icmp unreachable host_prohibited
+0.001 < icmp unreachable net_unreachable_for_tos
+0.001 < icmp unreachable host_unreachable_for_tos
+0.001 < icmp unreachable packet_filtered
+0.001 < icmp unreachable precedence_violation
+0.001 < icmp unreachable precedence_cutoff

// Then all the other types. These are legal because the code is optional.
+0.1 < icmp echo_reply
+0.001 < icmp source_quench
+0.001 < icmp redirect
+0.001 < icmp echo_request
+0.001 < icmp time_exceeded
+0.001 < icmp parameter_problem
+0.001 < icmp timestamp_request
+0.001 < icmp timestamp_reply
+0.001 < icmp information_request
+0.001 < icmp information_reply
+0.001 < icmp address_mask_request
+0.001 < icmp address_mask_reply

// Now try symbolic types with numeric codes.
+0.05 < icmp unreachable code_0
+0.001 < icmp unreachable code_1
+0.001 < icmp unreachable code_255

// Now try numeric types with numeric codes
+0.05 < icmp type_0 code_0
+0.001 < icmp type_1 code_0
+0.001 < icmp type_255 code_0

// Receiver ACKs all data.
+0.04 < . 1:1(0) ack 1001 win 257
/*
// Clean up.
+0.1 close(4) = 0
+0.001 > F. 1001:1001(0) ack 1 <...>
+0.1 < F. 1:1(0) ack 1002 win 257
+0.001 > . 1002:1002(0) ack 2
*/
